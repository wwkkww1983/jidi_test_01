package com.rz.iot.think.utils;

import com.github.pagehelper.PageInfo;
import com.rz.iot.think.model.FileShowSimple;
import com.rz.iot.think.model.IotAreaRel;
import com.rz.iot.think.model.Result;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.csource.common.MyException;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.util.*;

/**
 * Author by xuxiake, Date on 2019/3/14.
 * PS: Not easy to write code, please indicate.
 * Description：
 */
@Log4j2
public class CommonFunctions {

    public static String getIpAddress(HttpServletRequest request) {
        String ip = request.getHeader("x-forwarded-for");
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("Proxy-Client-IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("WL-Proxy-Client-IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("HTTP_CLIENT_IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("HTTP_X_FORWARDED_FOR");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getRemoteAddr();
        }
        return ip;
    }

    /**
     * 根据文件扩展名判断文件是否是图片
     * @param extName
     * @return
     */
    public static boolean isImage(String extName) {
        switch (extName) {
            case "jpg":
                return true;
            case "JPG":
                return true;
            case "jpeg":
                return true;
            case "JPEG":
                return true;
            case "png":
                return true;
            case "PNG":
                return true;
            case "gif":
                return true;
            case "GIF":
                return true;
            case "bmp":
                return true;
            case "BMP":
                return true;
            default:
                return false;
        }
    }

    /**
     * 保存文件，返回url集合
     * @param files MultipartFile集合
     * @param request HttpServletRequest
     * @return
     */
    public static List<FileShowSimple> fileUpload(MultipartFile[] files, HttpServletRequest request) {
        //将要插入的数据保存到列表中
        List<FileShowSimple> pics = new ArrayList<>();
        String ip = getIpAddress(request);
        try {
            for (MultipartFile file : files) {
                if (!file.isEmpty()) {
                    //获得原始文件名
                    String originalFilename = file.getOriginalFilename();
                    //获得文件后缀名
                    String extName = originalFilename.substring(originalFilename.lastIndexOf(".") + 1, originalFilename.length());
                    //不是图片跳过循环
                    if (!isImage(extName)) {
                        continue;
                    }
                    BufferedInputStream bis = new BufferedInputStream(file.getInputStream());
                    ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);
                    byte[] temp = new byte[1024];
                    int len = -1;
                    while((len = bis.read(temp)) != -1) {
                        baos.write(temp, 0, len);
                    }
                    FastDFSUtils fastDFSUtils = new FastDFSUtils("classpath:FastDFS.properties");
                    String path = fastDFSUtils.uploadFile(baos.toByteArray(), extName);
                    String fdfsNginxServer = PropertiesUtil.getProperty("FastDFS.properties", "fdfs_nginx_server");

                    String url = fdfsNginxServer + "/" + path;
                    FileShowSimple fileShowSimple = new FileShowSimple();
                    fileShowSimple.setUrl(url);
                    fileShowSimple.setName(originalFilename);
                    fileShowSimple.setSize(file.getSize());
                    pics.add(fileShowSimple);
                }
            }
            return pics;
        } catch (IOException e) {
            log.error(e.getMessage(), e);
        } catch (MyException e) {
            log.error(e.getMessage(), e);
        }
        return null;
    }

    /**
     * 获取省市区街道信息
     * @param areaAddress
     * @return
     */
    public static Map<String,Object> getAreaInfo(List<Map<Long,String>> areaAddress){

        IotAreaRel iotAreaRel = new IotAreaRel();

        Integer flag = 1;
        Long streetId = null;
        for (Map<Long,String> map : areaAddress){
            Set<Map.Entry<Long, String>> entries = map.entrySet();
            Iterator<Map.Entry<Long, String>> iterator = entries.iterator();
            if (iterator.hasNext()){
                Map.Entry<Long, String> entry = iterator.next();
                Long key = entry.getKey();
                String value = entry.getValue();
                switch (flag) {
                    case 1:
                        iotAreaRel.setProvinceName(value);
                        iotAreaRel.setProvinceId(key);
                        break;
                    case 2:
                        iotAreaRel.setCityName(value);
                        iotAreaRel.setCityId(key);
                        break;
                    case 3:
                        iotAreaRel.setDistrictName(value);
                        iotAreaRel.setDistrictId(key);
                        break;
                    case 4:
                        streetId = key;
                        break;

                }
            }
            flag++;
        }
        Map<String,Object> map = new HashMap<>();
        map.put("iotAreaRel",iotAreaRel);
        map.put("streetId",streetId);
        return map;
    }

    /**
     * 去除map中的空值或空字符串
     * @param map
     */
    public static void removeMapnull(Map<String, Object> map){
        //找出参数空值
        List<String> list = new ArrayList<>();
        for (String key : map.keySet()){
            if(map.get(key).equals("") || map.get(key) == null){
                list.add(key);
            }
        }
        //去除参数空值
        for(String key : list){
            map.remove(key);
        }
    }

    /**
     * 结构调用成功返回
     * @param infoList
     * @param <T>
     * @return
     */
    public static <T> Result SuccessResult(List<T> infoList){
        PageInfo<T> pageInfo = new PageInfo<>(infoList);
        Result result = new Result();
        result.setMessage("查询成功！");
        result.setData(pageInfo);
        return result;
    }
}
