package com.rz.iot.think.controller;

import com.rz.iot.think.model.Page;
import com.rz.iot.think.model.Result;
import com.rz.iot.think.model.alarm.IotAlarmBox;
import com.rz.iot.think.model.alarm.IotAlarmBoxRecord;
import com.rz.iot.think.model.alarm.IotAlarmBoxRecordLog;
import com.rz.iot.think.model.param.IotAlarmBoxRecorderSelectParam;
import com.rz.iot.think.model.param.IotAlarmBoxRecorderStatusUpdateParam;
import com.rz.iot.think.model.param.IotAlarmBoxSelectParam;
import com.rz.iot.think.service.AggregationAlarmService;
import com.rz.iot.think.service.IotAlarmBoxRecordLogService;
import com.rz.iot.think.service.IotAlarmBoxRecordService;
import com.rz.iot.think.service.IotAlarmBoxService;
import com.rz.iot.think.utils.RzIotDBConstParam;
import org.apache.commons.lang.time.DateUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;

/**
 * @Author:jidi
 * @Date:2019/04/10 10:54
 * @Description:报警箱Controller
 **/

@RestController
@RequestMapping("/alarmBox")
public class IotAlarmBoxController {
    @Resource
    private  IotAlarmBoxService iotAlarmBoxService;
    @Resource
    private IotAlarmBoxRecordService iotAlarmBoxRecordService;
    @Resource
    private AggregationAlarmService aggregationAlarmService;
    @Resource
    private IotAlarmBoxRecordLogService iotAlarmBoxRecordLogService;


    /***
     * 查询报警箱基本信息
     * @param page
     * @param iotAlarmBoxSelectParam
     * @return
     */
    @RequestMapping("/findAlarmBoxByCondition")
    public Result findAlarmByCondition(Page page, IotAlarmBoxSelectParam iotAlarmBoxSelectParam){
        Result res = iotAlarmBoxService.findAlarmByCondition(page, iotAlarmBoxSelectParam);
        return res;
    }

    /***
     * 查询报警箱详细信息
     * @param id
     * @return
     */
    @RequestMapping("/findAlarmBoxDetail")
    public Result findAlarmBoxDetail(Integer id){
        Result res = iotAlarmBoxService.findAlarmBoxDetail(id);
        return res;
    }

    /***
     * 修改报警箱信息时，查询报警箱自身的信息
     * @param id
     * @return
     */
    @RequestMapping("/updateAlarmboxDetail")
    public Result updateAlarmboxDetail(Integer id){
        Result res = iotAlarmBoxService.updateAlarmboxDetail(id);
        return res;
    }


    /***
     * 修改报警箱信息
     * @param iotAlarmBox
     * @return
     */
    @RequestMapping("/updateAlarmbox")
    public Result updateAlarmbox(IotAlarmBox iotAlarmBox){
        Result res = iotAlarmBoxService.updateAlarmbox(iotAlarmBox);
        return res;
    }


    /***
     * 主动报警
     * @return
     */
    @RequestMapping("/autoalarm")
    public Result autoalarm(){
        Result res = new Result();
        return res;
    }

    /***
     * 报警历史统计(近30天的)
     * @param page
     * @param iotAlarmBoxRecorderSelectParam
     * @return
     */
    @RequestMapping("/alarmBoxMessageStatistical")
    public Result alarmBoxMessageStatistical(Page page, IotAlarmBoxRecorderSelectParam iotAlarmBoxRecorderSelectParam){
        Result res = iotAlarmBoxService.alarmBoxMessageStatistical(page, iotAlarmBoxRecorderSelectParam);
        return res;
    }

    /***
     * 刷新报警历史统计
     * @param page
     * @param iotAlarmBoxRecorderSelectParam
     * @return
     */
    @RequestMapping("/flushAlarmBoxMessageStatistical")
    public Result flushAlarmBoxMessageStatistical(Page page, IotAlarmBoxRecorderSelectParam iotAlarmBoxRecorderSelectParam){
        //查询报警箱id集合
        List<Integer> boxIdList = iotAlarmBoxService.findBoxIds();
        //结束日期
        Date endTime = new Date();
        //起始日期
        Date startTime = DateUtils.addDays(endTime,-30);
        for(Integer boxId : boxIdList){
            //查询报警箱报警日志信息，默认查询过去一个月的日志记录
            List<IotAlarmBoxRecorderSelectParam> iotAlarmBoxRecorderSelectParamList= aggregationAlarmService.findAlarmLog(boxId,
                    RzIotDBConstParam.SELECT_ALARM_BOX_LOG_TYPE_THREE,
                    endTime, startTime,
                    RzIotDBConstParam.SELECT_ALARM_BOX_LOG_PARAM_WMAJORTYPE_CALL,
                    RzIotDBConstParam.SELECT_ALARM_BOX_LOG_PARAM_WMINORTYPE);
            //有该报警箱的报警日志信息
            if(iotAlarmBoxRecorderSelectParamList.size() > RzIotDBConstParam.ALARM_BOX_LOG_NONE){
                //查询报警箱报警实时记录表中是否存在该报警箱信息
                IotAlarmBoxRecord iotAlarmBoxRecord = iotAlarmBoxRecordService.findIotAlarmBoxRecord(boxId);
                if(iotAlarmBoxRecord == null){//不存在添加最新的记录
                    iotAlarmBoxRecord = new IotAlarmBoxRecord();
                    //报警箱id
                    iotAlarmBoxRecord.setBoxId(boxId);
                    //报警类型为接收报警
                    iotAlarmBoxRecord.setType(RzIotDBConstParam.ALARM_BOX_RECORD_TYPE_PASSIVE);
                    //报警处理状态
                    if(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getStatus() != null){
                        iotAlarmBoxRecord.setStatus(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getStatus());
                    }
                    //接警时间
                    if(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getAnswerTime() != null){
                        iotAlarmBoxRecord.setAnswerTime(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getAnswerTime());
                    }
                    //报警时间
                    if(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getCreateTime() != null){
                        iotAlarmBoxRecord.setCreateTime(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getCreateTime());
                    }
                    //向报警信息实时记录表添加一条记录
                    iotAlarmBoxRecordService.addIotAlarmBoxRecord(iotAlarmBoxRecord);
                }

                //报警箱报警信息实时记录表存在该报警箱信息，修改信息
                if(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getStatus() != null){
                    iotAlarmBoxRecord.setStatus(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getStatus());
                }
                if(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getAnswerTime() != null){
                    iotAlarmBoxRecord.setAnswerTime(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getAnswerTime());
                }
                if(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getCreateTime() != null){
                    iotAlarmBoxRecord.setCreateTime(iotAlarmBoxRecorderSelectParamList.get(iotAlarmBoxRecorderSelectParamList.size()-1).getCreateTime());
                }
                //修改为最新的记录
                iotAlarmBoxRecordService.updateIotAlarmBoxRecord(iotAlarmBoxRecord);

                //报警信息日志表数据处理
                for(IotAlarmBoxRecorderSelectParam alarmBoxRecorderSelectParam : iotAlarmBoxRecorderSelectParamList){
                    //查询出日志表中最近一条信息记录






                }
            }

        }


        Result res = iotAlarmBoxService.alarmBoxMessageStatistical(page, iotAlarmBoxRecorderSelectParam);
        return res;
    }


    /***
     * 根据主键修改报警信息记录状态
     * @param iotAlarmBoxRecorderStatusUpdateParam
     * @return
     */
    @RequestMapping("/updateAlarmBoxRecordStatus")
    public Result updateAlarmBoxRecordStatus(IotAlarmBoxRecorderStatusUpdateParam iotAlarmBoxRecorderStatusUpdateParam){
        Result res = iotAlarmBoxRecordService.updateStatusById(iotAlarmBoxRecorderStatusUpdateParam);
        return res;
    }

    @RequestMapping("/testAlarmBoxStatus")
    public Result testAlarmBoxStatus(){
        Result result = new Result();
        result.setData(aggregationAlarmService.findAlarmWorkInfo(5));

        return result;
    }

    @RequestMapping("/testAlarmBoxLog")
    public Result testAlarmBoxLog(){
        Result result = new Result();
        //结束日期
        Date endTime = new Date();
        //起始日期
        Date startTime = DateUtils.addDays(endTime,-30);
        result.setData(aggregationAlarmService.findAlarmLog(5,0,startTime,endTime,1,0));

        return result;
    }


}
