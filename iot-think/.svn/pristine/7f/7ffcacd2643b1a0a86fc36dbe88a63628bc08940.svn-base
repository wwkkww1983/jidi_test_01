package com.rz.iot.think.service.impl;

import com.rz.iot.think.mapper.screen.IotScreenMaterialKeyRelMapper;
import com.rz.iot.think.mapper.screen.IotScreenPicInfoMapper;
import com.rz.iot.think.mapper.screen.IotScreenPlayStrategyMapper;
import com.rz.iot.think.mapper.screen.IotScreenVideoInfoMapper;
import com.rz.iot.think.model.Result;
import com.rz.iot.think.model.screen.*;
import com.rz.iot.think.model.show.*;
import com.rz.iot.think.service.IotScreenPlayStrategyService;
import com.rz.iot.think.service.IotScreenProgramService;
import com.rz.iot.think.utils.FastDFSUtils;
import com.rz.iot.think.utils.PropertiesUtil;
import com.rz.iot.think.utils.RzIotDBConstParam;
import com.rz.iot.think.websocket.screen.ScreenSendHandler;
import com.rz.iot.utils.RzIotDatetime;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

/**
 * @Auther: yyjuan
 * @Date: 2019/3/22 0022 11:08
 * @Description:
 */
@Service
@Slf4j
public class IotScreenPlayStrategyServiceImpl implements IotScreenPlayStrategyService {

    @Value("${screen.preDownloadURL}")
    public String preDownloadURL;
    @Value("${screen.notificationURL}")
    public String notificationURL;
    @Resource
    private IotScreenPlayStrategyMapper iotScreenPlayStrategyMapper;
    @Resource
    private IotScreenProgramService iotScreenProgramService;
    @Resource
    private ScreenSendHandler screenSendHandler;
    @Resource
    private IotScreenMaterialKeyRelMapper iotScreenMaterialKeyRelMapper;
    @Resource
    private IotScreenVideoInfoMapper iotScreenVideoInfoMapper;
    @Resource
    private IotScreenPicInfoMapper iotScreenPicInfoMapper;

    /**
     * 信息屏播放详情
     * @param playStrategyId 策略id
     * @return
     */
    @Override
    public Result detail(Integer playStrategyId) {

        Result result = new Result();
        if (playStrategyId == null) {
            return Result.paramNull(result);
        }

        IotScreenPlayStrategy iotScreenPlayStrategy = iotScreenPlayStrategyMapper.selectByPrimaryKey(playStrategyId);
        result.setData(iotScreenPlayStrategy);

        // TODO: 2019/3/29 待完善

        return result;
    }

    /**
     * 下发信息屏播放策略
     * @param playStrategyId 播放策略id
     * @return
     */
    @Override
    public Result sendStrategy(Integer playStrategyId, String cardId) {

        // 测试
        cardId = "y16-b18-20965";

        Result result = new Result();
        if (playStrategyId == null || StringUtils.isEmpty(cardId)) {
            return Result.paramNull(result);
        }

        IotScreenPlayStrategy iotScreenPlayStrategy = iotScreenPlayStrategyMapper.selectByPrimaryKey(playStrategyId);
        // 节目id
        Integer programId = iotScreenPlayStrategy.getProgramId();

        IotScreenProgramInfoShowDetail programInfo = (IotScreenProgramInfoShowDetail) iotScreenProgramService.programDetail(programId).getData();

        // layers
        Long totalSize = 0L;
        List<Layer> layers = new ArrayList<>();
        List<IotScreenProgramLayer> programLayers = programInfo.getProgramLayers();
        for (IotScreenProgramLayer programLayer : programLayers) {

            Source source = null;
            if (programLayer instanceof IotScreenProgramVideoLayer) {
                IotScreenProgramVideoLayer programVideoLayer = (IotScreenProgramVideoLayer) programLayer;
                IotScreenVideoSource videoSource = programVideoLayer.getSource();

                source = new VideoSource(
                        videoSource.getId(),
                        videoSource.getMd5(),
                        videoSource.getName(),
                        videoSource.getLeft(),
                        videoSource.getTop(),
                        videoSource.getWidth(),
                        videoSource.getHeight(),
                        videoSource.getSize(),
                        videoSource.getPlayTime(),
                        videoSource.getTimeSpan(),
                        videoSource.getEntryEffectTimeSpan(),
                        videoSource.getExitEffectTimeSpan(),
                        videoSource.getEntryEffectStr(),
                        videoSource.getExitEffectStr(),
                        videoSource.getType());
                totalSize += videoSource.getSize();

            } else if (programLayer instanceof IotScreenProgramImageLayer) {

                IotScreenProgramImageLayer programImageLayer = (IotScreenProgramImageLayer) programLayer;
                IotScreenImageSource imageSource = programImageLayer.getSource();

                source = new ImageSource(
                        imageSource.getId(),
                        imageSource.getMd5(),
                        imageSource.getName(),
                        imageSource.getLeft(),
                        imageSource.getTop(),
                        imageSource.getWidth(),
                        imageSource.getHeight(),
                        imageSource.getSize(),
                        imageSource.getPlayTime(),
                        imageSource.getTimeSpan(),
                        imageSource.getEntryEffectTimeSpan(),
                        imageSource.getExitEffectTimeSpan(),
                        imageSource.getEntryEffectStr(),
                        imageSource.getExitEffectStr(),
                        imageSource.getType(),
                        "");
                totalSize += imageSource.getSize();

            } else if (programLayer instanceof IotScreenProgramSingleLineTextLayer) {
                IotScreenProgramSingleLineTextLayer singleLineTextLayer = (IotScreenProgramSingleLineTextLayer) programLayer;
                IotScreenLineTextSource lineTextSource = singleLineTextLayer.getSource();

                source = new SingleLineTextSource(
                        lineTextSource.getId(),
                        null,
                        lineTextSource.getName(),
                        lineTextSource.getLeft(),
                        lineTextSource.getTop(),
                        lineTextSource.getWidth(),
                        lineTextSource.getHeight(),
                        null,
                        lineTextSource.getPlayTime(),
                        lineTextSource.getTimeSpan(),
                        lineTextSource.getEntryEffectTimeSpan(),
                        lineTextSource.getExitEffectTimeSpan(),
                        lineTextSource.getEntryEffectStr(),
                        lineTextSource.getExitEffectStr(),
                        lineTextSource.getType(),
                        lineTextSource.getSpeed(),
                        lineTextSource.getHtml(),
                        lineTextSource.getLineHeight());

            } else if (programLayer instanceof IotScreenProgramDigitalClockLayer) {
                IotScreenProgramDigitalClockLayer digitalClockLayer = (IotScreenProgramDigitalClockLayer) programLayer;
                IotScreenDigitalClockSource digitalClockSource = digitalClockLayer.getSource();

                source = new DigitalClockSource(
                        digitalClockSource.getId(),
                        null,
                        digitalClockSource.getName(),
                        digitalClockSource.getLeft(),
                        digitalClockSource.getTop(),
                        digitalClockSource.getWidth(),
                        digitalClockSource.getHeight(),
                        null,
                        digitalClockSource.getPlayTime(),
                        digitalClockSource.getTimeSpan(),
                        digitalClockSource.getEntryEffectTimeSpan(),
                        digitalClockSource.getExitEffectTimeSpan(),
                        digitalClockSource.getEntryEffectStr(),
                        digitalClockSource.getExitEffectStr(),
                        digitalClockSource.getType(),
                        digitalClockSource.getLineHeight(),
                        digitalClockSource.getHtml());

            } else if (programLayer instanceof IotScreenProgramWeatherLayer) {
                IotScreenProgramWeatherLayer weatherLayer = (IotScreenProgramWeatherLayer) programLayer;
                IotScreenWeatherSource weatherSource = weatherLayer.getSource();

                source = new WeatherSource(
                        weatherSource.getId(),
                        null,
                        weatherSource.getName(),
                        weatherSource.getLeft(),
                        weatherSource.getTop(),
                        weatherSource.getWidth(),
                        weatherSource.getHeight(),
                        null,
                        weatherSource.getPlayTime(),
                        weatherSource.getTimeSpan(),
                        weatherSource.getEntryEffectTimeSpan(),
                        weatherSource.getExitEffectTimeSpan(),
                        weatherSource.getEntryEffectStr(),
                        weatherSource.getExitEffectStr(),
                        weatherSource.getType(),
                        weatherSource.getCity(),
                        weatherSource.getCode(),
                        weatherSource.getHtml(),
                        weatherSource.getLineHeight());

            }
            Layer layer = new Layer();
            List<Source> sources = new ArrayList<>();
            sources.add(source);
            layer.setSources(sources);
            layers.add(layer);
        }

        // program

        Program program = new Program();
        program.setName(programInfo.getName());
        program.setWidth(programInfo.getWidth());
        program.setHeight(programInfo.getHeight());
        program.setTotalSize(totalSize);
        program.setLayers(layers);

        // schedule

        Schedule schedule = new Schedule();

        if (!StringUtils.isEmpty(iotScreenPlayStrategy.getWeekfilter())) {
            schedule.setWeekFilter(RzIotDatetime.getPlayWeek(iotScreenPlayStrategy.getWeekfilter()));
            schedule.setFilterType(FilterType.Week);
        }
        schedule.setDateType(DateType.Range);
        schedule.setTimeType(TimeType.Range);
        schedule.setStartDate(RzIotDatetime.dateToString(iotScreenPlayStrategy.getStartDate(), "yyyy-MM-dd"));
        schedule.setEndDate(RzIotDatetime.dateToString(iotScreenPlayStrategy.getEndDate(), "yyyy-MM-dd"));
        schedule.setStartTime(RzIotDatetime.dateToString(iotScreenPlayStrategy.getStartTime(), "HH:mm"));
        schedule.setEndTime(RzIotDatetime.dateToString(iotScreenPlayStrategy.getEndTime(), "HH:mm"));

        List<Schedule> schedules = new ArrayList<>();
        schedules.add(schedule);

        // taskItem
        TaskItem taskItem = new TaskItem();
        taskItem.set_program(program);
        taskItem.setSchedules(schedules);

        // task
        List<TaskItem> items = new ArrayList<>();
        items.add(taskItem);
        ProgramsTask programsTask = new ProgramsTask();
        programsTask.setItems(items);

        // command
        Command command = new Command();
        command.set_type("PlayXixunTask");
        command.setNotificationURL(notificationURL);
        command.setPreDownloadURL(preDownloadURL);
        command.setTask(programsTask);

        screenSendHandler.commandXixunPlayer(cardId, command);

        result.setData(command);

        return result;
    }

    /**
     * 信息屏下载素材的接口
     * @param key
     * @param response
     */
    @Override
    public void downloadMaterial(String key, HttpServletResponse response) {
        IotScreenMaterialKeyRel iotScreenMaterialKeyRel = iotScreenMaterialKeyRelMapper.selectByKey(key);
        Integer materialType = iotScreenMaterialKeyRel.getMaterialType();
        Integer materialId = iotScreenMaterialKeyRel.getMaterialId();

        String fdfsNginxServer = PropertiesUtil.getProperty("FastDFS.properties", "fdfs_nginx_server");
        String filePath = "";
        if (materialType == RzIotDBConstParam.MATERTAL_TYPE_OF_PICTURE) {
            IotScreenPicInfo iotScreenPicInfo = iotScreenPicInfoMapper.selectByPrimaryKey(materialId);
            String picUrl = iotScreenPicInfo.getPicUrl();
            filePath = picUrl.split(fdfsNginxServer + "/")[1];
        } else if (materialType == RzIotDBConstParam.MATERTAL_TYPE_OF_VIDEO) {
            IotScreenVideoInfo iotScreenVideoInfo = iotScreenVideoInfoMapper.selectByPrimaryKey(materialId);
            String videoUrl = iotScreenVideoInfo.getVideoUrl();
            filePath = videoUrl.split(fdfsNginxServer + "/")[1];
        }

        OutputStream out = null;
        BufferedInputStream bis = null;
        try {
            InputStream is = FastDFSUtils.getInputStream(filePath);
            out = response.getOutputStream();
            IOUtils.copy(is, out);
        } catch (Exception e) {
            log.error("文件下载失败", e);
        } finally {
            try {
                if (bis!=null) {
                    // 关闭文件输入流
                    bis.close();
                }
                if (out!=null) {
                    // 关闭输出流
                    out.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
